#use-added-syntax(tests)
defpackage toml/test:
  import core
  import collections
  import toml/table
  import toml/parser
  import toml/value
  import toml/file

deftest parse-str:
  val table = table(parse-file(\<S>title = "TOML Example"<S>))
  #EXPECT(length(entries(table)) == 1)
  #EXPECT(get(table, "title") as String == "TOML Example")

deftest parse-num:
  val table = table(parse-file(\<S>title = 10<S>))
  #EXPECT(length(entries(table)) == 1)
  #EXPECT(get(table, "title") as Int == 10)

deftest to-string:
  val table = TomlTable $ to-hashtable<String, TomlValue> $ ["name" => "foo"]
  #EXPECT(to-string(table) == "name = \"foo\"\n")

  val file = TomlFile(table)
  #EXPECT(to-string(file) == "name = \"foo\"\n")

deftest ser-deser:
  val file = parse-file("title = \"foo\"\nversion = 10\n")
  #EXPECT(to-string(file) == "title = \"foo\"\nversion = 10\n")

deftest table-to-string:
  val table = TomlTable $ [
    "foo" => "bar",
    "dependencies" => TomlTable $ [
      "stanza-toml" => "git@github.com:tylanphear/stanza-toml",
      "poet"        => "git@github.com:tylanphear/poet"
    ]
  ]
  #EXPECT(to-string(table) == "\
    foo = \"bar\"\n\
    [dependencies]\n\
    stanza-toml = \"git@github.com:tylanphear/stanza-toml\"\n\
    poet = \"git@github.com:tylanphear/poet\"\n")

deftest table-parse:
  val toml = table $ parse-file $ "\
  foo = \"bar\"\n\
  [dependencies]\n\
  stanza-toml = \"git@github.com:tylanphear/stanza-toml\"\n\
  poet = \"git@github.com:tylanphear/poet\"\n"
  #EXPECT(toml["foo"] as String == "bar")
  #EXPECT((toml["dependencies"] as TomlTable)["stanza-toml"] as String == "git@github.com:tylanphear/stanza-toml")
